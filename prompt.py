BIG_temporal_sequences_prompt_gpt = "You will identify the exact time frame during which events occurred based on the provided information. Analyze the events chronologically, considering the activities leading up to the time frame and the constraints imposed by each event. Conclude with a definitive statement about the valid time frame, and explain your reasoning in a clear and succinct manner that directly supports your conclusion."

BIG_penguins_in_a_table_prompt_gpt = "You will answer questions about the penguins in the provided table. Ensure to reference any changes in the data set when answering questions. Provide direct answers based on the data, and clearly outline the steps taken to derive your answer, including any additions or removals from the data set. Present your final answer in a clear and direct manner, explicitly linking it to the question. Be concise and relevant in your explanations, avoiding unnecessary information. Ensure that your responses follow a logical progression, clearly connecting each part of your answer. If applicable, briefly explain the reasoning behind your final answer to enhance understanding."

BIG_geometric_shapes_prompt_gpt = "You will identify the geometric shape represented by the given SVG path. Start by thoroughly analyzing the SVG path, focusing on the specific components such as the points, the types of lines (straight or curved), and the relationships between these points. Pay close attention to the defining properties of geometric shapes, including the number of sides, angles, and any unique characteristics like symmetry or curvature. As you visualize the connections, clearly articulate how these characteristics correspond to the properties of common geometric shapes. Provide a structured, step-by-step justification for your answer, beginning with a brief overview of the SVG path, followed by a detailed breakdown of its components, and concluding with a clear identification of the geometric shape. Use definitive language to express your confidence level regarding the identification, and consider potential misconceptions that may arise in shape identification."

BIG_epistemic_reasoning_prompt_gpt = "You will answer a question from the epistemic_reasoning task. Determine whether one sentence entails the next Think step by step and provide your final answer."

BIG_object_counting_prompt_gpt = "You will accurately count and categorize various types of objects in response to questions. Begin by directly stating the total number of items identified. Clearly list all items mentioned, ensuring that each item is categorized without omission. If any item is unclear or ambiguous, explicitly ask for clarification before proceeding with the count. Maintain consistency in number representation by using words for numbers under ten and numerals for ten and above. After listing the items, provide a detailed breakdown of the counting process, clearly stating the quantities for each category and performing the arithmetic to arrive at the total count. Conclude your response with a definitive summary, stating, \"The total number of [object type] is [number], which includes [list of items].\" Ensure that your reasoning flows logically from identification to counting, leading to a clear and accurate conclusion. Emphasize clarity and precision throughout the process, and when summarizing, clearly state the total number of each item type alongside the overall total, ensuring that the relationship between the counts is explicit. Additionally, incorporate a brief introductory statement that sets the context for the counting task, such as, \"Let's determine the total count of the specified objects.\" Encourage user engagement by inviting them to verify the items listed and clarify any discrepancies in the count, enhancing the overall interaction. Lastly, reinforce the importance of accuracy in both the counting and the final summary to ensure a comprehensive understanding of the results, while also highlighting the significance of each item in the context of the total count. Furthermore, focus on delivering a direct answer to the user's query, ensuring that the response is both thorough and succinct, while maintaining an engaging tone throughout. Additionally, consider providing a brief overview of the categories before diving into the detailed breakdown to enhance user comprehension."

BIG_causal_judgment_prompt_gpt = "You will provide clear and context-aware causal attributions for questions related to decision-making scenarios. Begin with a definitive answer to the causation question, explicitly stating whether the subject's actions contributed to the outcome. Follow this with a concise rationale that connects the subject's actions to the outcome, ensuring clarity and relevance. Incorporate a structured step-by-step analysis that highlights the intentions of the subjects involved, their actions, and the contextual factors influencing the situation. Use straightforward, accessible language to explain the causal relationships, avoiding jargon and ambiguity. When applicable, support your reasoning with specific examples or evidence that illustrate the causal links. Conclude with a succinct summary that reinforces the primary cause while acknowledging any significant contributing factors, ensuring that your response remains focused, relevant, and comprehensive in understanding the scenario while considering alternative perspectives or pressures faced by the subjects."


BIG_geometric_shapes_prompt_gemini = "The system should classify geometric shapes from SVG path data. The output should be a JSON object: `{\"classification\": \"shape_name\", \"confidence\": 0.0-1.0, \"probabilities\": {}, \"details\": {}, \"justification\": \"\"}`. The `probabilities` field will contain a probability distribution over all possible shapes. The `details` field may contain additional information such as vertex count, angle measurements, and other relevant geometric properties. The `justification` field will provide a concise explanation of the classification process, including the algorithms used and key features considered. Prioritize simpler shapes (line, circle, rectangle) before complex ones. For polygons, prioritize specific types (pentagon, hexagon, octagon) over generic \"polygon\", using standard deviation of side lengths and angles to assess regularity. For quadrilaterals, employ a hierarchical approach: first check for kites (two pairs of adjacent equal sides), then trapezoids (one pair of parallel sides), then parallelograms (two pairs of parallel sides). If a parallelogram, check for rhombuses (equal side lengths), then rectangles (right angles), and finally squares (equal side lengths and right angles). Otherwise, classify as an irregular quadrilateral. For ellipses, calculate eccentricity. For arcs and sectors, extract radii, central angles, and arc lengths. Handle implicitly defined shapes by inferring missing data using interpolation techniques. The system should be invariant to scaling and translation, robust to variations in vertex order, and handle plural forms by stemming to singular. Preprocess by removing leading/trailing whitespace, punctuation, and extra spaces. Return \"invalid SVG\" for uninterpretable data. The confidence score should reflect the certainty of the classification, considering data quality and ambiguity. The system should incorporate contextual information from surrounding text, if available, to aid in disambiguation. The confidence score should be a weighted average of geometric confidence and contextual confidence (if available). The system should explicitly handle unconnected paths, reporting them as separate shapes and attempting to close open paths where reasonable. The system should explicitly handle the identification of kites and trapezoids, prioritizing their detection before general quadrilateral classification. The system should handle partially defined kites and trapezoids by estimating missing data points and providing a confidence score reflecting the uncertainty introduced by the missing data. The system should explicitly handle the identification of sectors, defining a sector as a portion of a circle bounded by two radii and an arc. The system should detail how to extract the radius, central angle, and arc length from the SVG path data, suggesting algorithms such as fitting a circle to the arc points and calculating the angle subtended by the radii. The system should prioritize arc/sector detection before polygon classification. The system should handle partially defined arcs or sectors by estimating missing data points and providing a confidence score reflecting the uncertainty introduced by the missing data. The training data should include a wide variety of kite, trapezoid, and sector examples with varying side lengths, angles, radii, central angles, and levels of noise.  The system should explicitly handle the case of lines, returning \"line\" as the classification with high confidence if only two points are provided. The system should explicitly handle the case of polylines, returning \"polyline\" as the classification with high confidence if more than two points are provided and the path is not closed. The system should explicitly handle the case of points, returning \"point\" as the classification with high confidence if only one point is provided. The system should explicitly handle the case of ellipses, calculating the eccentricity and using it as a feature in the classification process. The system should explicitly handle the case of rectangles, checking for parallelism of opposite sides. The system should explicitly handle the case of squares, checking for equal side lengths and right angles. The system should explicitly handle the case of trapezoids, checking for one pair of parallel sides. The system should explicitly handle the case of parallelograms, checking for two pairs of parallel sides. The system should explicitly handle the case of rhombuses, checking for equal side lengths. The system should explicitly handle the case of kites, checking for two pairs of adjacent equal-length sides. The system should explicitly handle the case of composite shapes, decomposing them into their constituent parts and classifying each part separately. The system should explicitly handle the case of shapes with holes, identifying the holes and classifying the outer shape and the holes separately. The system should explicitly handle the case of self-intersecting polygons, identifying the self-intersections and classifying the resulting components separately. The system should explicitly handle the case of concave polygons, using a concave polygon detection algorithm to identify the concavities and classifying the resulting components separately. The system should explicitly handle the case of partially defined shapes, inferring missing data points and providing uncertainty estimates. The system should explicitly handle the case of shapes with missing data, inferring missing data points and providing uncertainty estimates. The system should explicitly handle the case of shapes with noisy data, using robust statistical methods to filter out noise and provide uncertainty estimates. The system should explicitly handle the case of shapes with varying levels of complexity, regularity, noise, and ambiguity. The system should explicitly handle the case of shapes with multiple connected components, classifying each component separately. The system should explicitly handle the case of shapes with varying levels of complexity, regularity, noise, and ambiguity. Include \"irregular polygon\" as a valid classification. Calculate a metric for polygon regularity (e.g., standard deviation of side lengths and angles). This metric should be included in the `details` field and used to adjust the confidence score. A high irregularity score should lower the confidence for specific polygon classifications. Ensure probabilities sum to 1. Probabilities should reflect uncertainty. For example, an irregular pentagon should have a higher probability for \"irregular polygon\" and lower probabilities for \"pentagon\" and other specific polygon types. Prioritize determining the number of sides as the first step in polygon classification. Suggest specific algorithms for side length and angle calculation, regularity metric calculation, and number of sides detection.  Employ a multi-stage classification process, starting with broad categories and progressively refining the classification based on calculated geometric properties.  Utilize a combination of geometric analysis and machine learning techniques to improve classification accuracy.  Incorporate contextual information from surrounding text, if available, to aid in disambiguation.  The confidence score should be a weighted average of geometric confidence and contextual confidence (if available).  The system should be robust to variations in vertex order.  The system should be able to handle shapes with multiple connected components, holes, concave polygons, self-intersecting polygons, partially defined shapes, missing data, and noisy data.  The system should be able to handle shapes with varying levels of complexity, regularity, noise, and ambiguity.  The system should explicitly handle cases where the shape is implicitly defined (e.g., a sector might be defined by only a few points on the arc).  The prompt should instruct the model on how to infer missing data points and estimate the complete shape parameters, along with associated confidence scores reflecting the uncertainty.  The system should prioritize geometric property analysis over simple vertex counting, especially for quadrilaterals.  The system should explicitly detail a hierarchical classification strategy for quadrilaterals, checking for properties like parallel sides, equal side lengths, right angles, and diagonal lengths to distinguish between parallelograms, rectangles, squares, trapezoids, and irregular quadrilaterals.  The system should output a probability distribution over all possible classes, even if the highest probability is low.  The system should handle plural forms of shape names by stemming the output to its singular form before comparison.  Preprocess the input string by removing leading and trailing whitespace, removing punctuation marks (.,!?\"), and replacing multiple spaces with single spaces.  The system should be robust to variations in vertex order.  The system should explicitly handle cases where the shape is implicitly defined (e.g., a sector might be defined by only a few points on the arc).  The prompt should instruct the model on how to infer missing data points and estimate the complete shape parameters, along with associated confidence scores reflecting the uncertainty.  The system should prioritize geometric property analysis over simple vertex counting, especially for quadrilaterals.  The system should explicitly detail a hierarchical classification strategy for quadrilaterals, checking for properties like parallel sides, equal side lengths, right angles, and diagonal lengths to distinguish between parallelograms, rectangles, squares, trapezoids, and irregular quadrilaterals.  The system should output a probability distribution over all possible classes, even if the highest probability is low.  The system should handle plural forms of shape names by stemming the output to its singular form before comparison.  Preprocess the input string by removing leading and trailing whitespace, removing punctuation marks (.,!?\"), and replacing multiple spaces with single spaces.  The system should be robust to variations in vertex order.  The system should explicitly handle cases where the shape is implicitly defined (e.g., a sector might be defined by only a few points on the arc).  The prompt should instruct the model on how to infer missing data points and estimate the complete shape parameters, along with associated confidence scores reflecting the uncertainty.  The system should prioritize geometric property analysis over simple vertex counting, especially for quadrilaterals.  The system should explicitly detail a hierarchical classification strategy for quadrilaterals, checking for properties like parallel sides, equal side lengths, right angles, and diagonal lengths to distinguish between parallelograms, rectangles, squares, trapezoids, and irregular quadrilaterals.  The system should output a probability distribution over all possible classes, even if the highest probability is low.  The system should handle plural forms of shape names by stemming the output to its singular form before comparison.  Preprocess the input string by removing leading and trailing whitespace, removing punctuation marks (.,!?\"), and replacing"

BIG_penguins_in_a_table_prompt_gemini = "provided information, even if incomplete. Prioritize providing partial answers or relevant information if a complete answer is impossible.  If data is missing, state what's missing and how it impacts the answer; attempt estimation using appropriate methods (mean, median, mode, interpolation), clearly stating assumptions and quantifying uncertainty.  The confidence score should reflect the certainty of the *provided* information, not its completeness.  Always attempt to answer, even with low confidence, providing a detailed explanation of uncertainties."

BIG_temporal_sequences_prompt_gemini = "The primary goal is accurate time range prediction; the output should be a concise time range in one of the following formats: HH:MM-HH:MM, HH:MM AM/PM - HH:MM AM/PM, or a numerical representation like 17:00-19:00. The response must contain *only* the time range; no additional explanatory text or preambles are permitted. Use a 12-hour clock with AM/PM indicators unless the input uses a 24-hour clock, in which case use the 24-hour format consistently. If no time range can be determined with certainty, return 'N/A'. Examples of acceptable outputs: 17:00-19:00, 5:00 PM - 7:00 PM, 05:00-07:00. Prioritize brevity; shorter, accurate responses are preferred."

BIG_epistemic_reasoning_prompt_gemini = ""

BIG_causal_judgment_prompt_gemini = ""

BIG_object_counting_prompt_gemini = ""